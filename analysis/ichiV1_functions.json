{
    "populate_indicators": "def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    heikinashi = qtpylib.heikinashi(dataframe)\n    dataframe['open'] = heikinashi['open']\n    dataframe['high'] = heikinashi['high']\n    dataframe['low'] = heikinashi['low']\n    dataframe['trend_close_5m'] = dataframe['close']\n    dataframe['trend_close_15m'] = ta.EMA(dataframe['close'], timeperiod=3)\n    dataframe['trend_close_30m'] = ta.EMA(dataframe['close'], timeperiod=6)\n    dataframe['trend_close_1h'] = ta.EMA(dataframe['close'], timeperiod=12)\n    dataframe['trend_close_2h'] = ta.EMA(dataframe['close'], timeperiod=24)\n    dataframe['trend_close_4h'] = ta.EMA(dataframe['close'], timeperiod=48)\n    dataframe['trend_close_6h'] = ta.EMA(dataframe['close'], timeperiod=72)\n    dataframe['trend_close_8h'] = ta.EMA(dataframe['close'], timeperiod=96)\n    dataframe['trend_open_5m'] = dataframe['open']\n    dataframe['trend_open_15m'] = ta.EMA(dataframe['open'], timeperiod=3)\n    dataframe['trend_open_30m'] = ta.EMA(dataframe['open'], timeperiod=6)\n    dataframe['trend_open_1h'] = ta.EMA(dataframe['open'], timeperiod=12)\n    dataframe['trend_open_2h'] = ta.EMA(dataframe['open'], timeperiod=24)\n    dataframe['trend_open_4h'] = ta.EMA(dataframe['open'], timeperiod=48)\n    dataframe['trend_open_6h'] = ta.EMA(dataframe['open'], timeperiod=72)\n    dataframe['trend_open_8h'] = ta.EMA(dataframe['open'], timeperiod=96)\n    dataframe['fan_magnitude'] = dataframe['trend_close_1h'] / dataframe['trend_close_8h']\n    dataframe['fan_magnitude_gain'] = dataframe['fan_magnitude'] / dataframe['fan_magnitude'].shift(1)\n    ichimoku = ftt.ichimoku(dataframe, conversion_line_period=20, base_line_periods=60, laggin_span=120, displacement=30)\n    dataframe['chikou_span'] = ichimoku['chikou_span']\n    dataframe['tenkan_sen'] = ichimoku['tenkan_sen']\n    dataframe['kijun_sen'] = ichimoku['kijun_sen']\n    dataframe['senkou_a'] = ichimoku['senkou_span_a']\n    dataframe['senkou_b'] = ichimoku['senkou_span_b']\n    dataframe['leading_senkou_span_a'] = ichimoku['leading_senkou_span_a']\n    dataframe['leading_senkou_span_b'] = ichimoku['leading_senkou_span_b']\n    dataframe['cloud_green'] = ichimoku['cloud_green']\n    dataframe['cloud_red'] = ichimoku['cloud_red']\n    dataframe['atr'] = ta.ATR(dataframe)\n    return dataframe",
    "populate_entry_trend": "def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    conditions = []\n    if self.buy_params['buy_trend_above_senkou_level'] >= 1:\n        conditions.append(dataframe['trend_close_5m'] > dataframe['senkou_a'])\n        conditions.append(dataframe['trend_close_5m'] > dataframe['senkou_b'])\n    if self.buy_params['buy_trend_above_senkou_level'] >= 2:\n        conditions.append(dataframe['trend_close_15m'] > dataframe['senkou_a'])\n        conditions.append(dataframe['trend_close_15m'] > dataframe['senkou_b'])\n    if self.buy_params['buy_trend_above_senkou_level'] >= 3:\n        conditions.append(dataframe['trend_close_30m'] > dataframe['senkou_a'])\n        conditions.append(dataframe['trend_close_30m'] > dataframe['senkou_b'])\n    if self.buy_params['buy_trend_above_senkou_level'] >= 4:\n        conditions.append(dataframe['trend_close_1h'] > dataframe['senkou_a'])\n        conditions.append(dataframe['trend_close_1h'] > dataframe['senkou_b'])\n    if self.buy_params['buy_trend_above_senkou_level'] >= 5:\n        conditions.append(dataframe['trend_close_2h'] > dataframe['senkou_a'])\n        conditions.append(dataframe['trend_close_2h'] > dataframe['senkou_b'])\n    if self.buy_params['buy_trend_above_senkou_level'] >= 6:\n        conditions.append(dataframe['trend_close_4h'] > dataframe['senkou_a'])\n        conditions.append(dataframe['trend_close_4h'] > dataframe['senkou_b'])\n    if self.buy_params['buy_trend_above_senkou_level'] >= 7:\n        conditions.append(dataframe['trend_close_6h'] > dataframe['senkou_a'])\n        conditions.append(dataframe['trend_close_6h'] > dataframe['senkou_b'])\n    if self.buy_params['buy_trend_above_senkou_level'] >= 8:\n        conditions.append(dataframe['trend_close_8h'] > dataframe['senkou_a'])\n        conditions.append(dataframe['trend_close_8h'] > dataframe['senkou_b'])\n    if self.buy_params['buy_trend_bullish_level'] >= 1:\n        conditions.append(dataframe['trend_close_5m'] > dataframe['trend_open_5m'])\n    if self.buy_params['buy_trend_bullish_level'] >= 2:\n        conditions.append(dataframe['trend_close_15m'] > dataframe['trend_open_15m'])\n    if self.buy_params['buy_trend_bullish_level'] >= 3:\n        conditions.append(dataframe['trend_close_30m'] > dataframe['trend_open_30m'])\n    if self.buy_params['buy_trend_bullish_level'] >= 4:\n        conditions.append(dataframe['trend_close_1h'] > dataframe['trend_open_1h'])\n    if self.buy_params['buy_trend_bullish_level'] >= 5:\n        conditions.append(dataframe['trend_close_2h'] > dataframe['trend_open_2h'])\n    if self.buy_params['buy_trend_bullish_level'] >= 6:\n        conditions.append(dataframe['trend_close_4h'] > dataframe['trend_open_4h'])\n    if self.buy_params['buy_trend_bullish_level'] >= 7:\n        conditions.append(dataframe['trend_close_6h'] > dataframe['trend_open_6h'])\n    if self.buy_params['buy_trend_bullish_level'] >= 8:\n        conditions.append(dataframe['trend_close_8h'] > dataframe['trend_open_8h'])\n    conditions.append(dataframe['fan_magnitude_gain'] >= self.buy_params['buy_min_fan_magnitude_gain'])\n    conditions.append(dataframe['fan_magnitude'] > 1)\n    for x in range(self.buy_params['buy_fan_magnitude_shift_value']):\n        conditions.append(dataframe['fan_magnitude'].shift(x + 1) < dataframe['fan_magnitude'])\n    if conditions:\n        dataframe.loc[reduce(lambda x, y: x & y, conditions), 'enter_long'] = 1\n    return dataframe",
    "populate_exit_trend": "def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    conditions = []\n    conditions.append(qtpylib.crossed_below(dataframe['trend_close_5m'], dataframe[self.sell_params['sell_trend_indicator']]))\n    if conditions:\n        dataframe.loc[reduce(lambda x, y: x & y, conditions), 'exit_long'] = 1\n    return dataframe"
}